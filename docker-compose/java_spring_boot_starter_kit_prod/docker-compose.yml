services:
  nginx:
    container_name: "prod_nginx"
    image: nginx:1.25.2-alpine
    ports: [ "8100:8100" ]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      static-network:
        ipv4_address: 172.28.0.2

  redis:
    container_name: "prod_redis"
    ports: [ "6379:6379" ]
    image: "redis"
    restart: unless-stopped
    networks:
      static-network:
        ipv4_address: 172.28.0.3

  mysql:
    container_name: "prod_mysql"
    image: mysql:8.0.34
    ports: [ "3307:3307" ]
    command:
      [
        mysqld,
        --port=3307,
        --default-authentication-plugin=mysql_native_password,
        --log-bin-trust-function-creators=1,
        --lower_case_table_names=1
      ]
    volumes:
      - "mysql:/var/lib/mysql:Z"
      - ./sql/initSql.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      MYSQL_PASSWORD: root
      MYSQL_USER: prod
      MYSQL_DATABASE: my_db
      MYSQL_ROOT_PASSWORD: root
    restart: unless-stopped
    networks:
      static-network:
        ipv4_address: 172.28.0.4

  server_0:
    container_name: "production_server_0"
    image: production/spring-boot:latest
    ports: [ "8200:8200" ]
    restart: unless-stopped
    networks:
      static-network:
        ipv4_address: 172.28.0.5

  server_1:
    container_name: "production_server_1"
    image: production/spring-boot:latest
    ports: [ "8201:8200" ]
    restart: unless-stopped
    networks:
      static-network:
        ipv4_address: 172.28.0.6

volumes:
  mysql:

networks:
  static-network:
    ipam:
      config:
        - subnet: 172.28.0.0/16